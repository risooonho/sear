 * Update TODO
 * Finish migration of rendering code to behing RenderSystem. (Rest of Graphics +  some System stuff)
 * Move all model loader / render code into loaders/ section and create a Global object (like RenderSystem).
  - Needs to be able to instatiate objects independant of entity (e.g. for mercator forest)
  - Needs models to query and check for updates from associated world entity's

 * Make greater use of vertex buffer objects
 * Improve media efficiency 
  - run meshes through poly reductioner
  - Make textures smaller

-------------------------------------------------------------------------------

 * Rendering Improvements
  - Support more OpenGL extensions.
  - Implement shadows (Volumes/Maps)
  - Implements Per-Pixel lighting and associated techniques
  - Move OpenGL code into one object. Aim is to allow the "drop in" of other Render objects using another system such as DX
  - Allow access to cube mapping for sky boxa
  - Add sun/lens glare effects
  - Add wavy grass like in ATITD
  - Add foot prints
 
 * Improve memory usage
   - Unload unused textures and other such data during runtime.
   - SDL_mixer (or maybe SDL sound subsystem) doesn't clean up properly
   - Eris doesn't clean up properly

 * Add an oct tree or other space partitioning system.
  - Provide basis for collision detection code
  - Reduce number of entities to render
  - Can link nodes to an "indoor" engine
  - Use to provide distance info for rendering options

 * Add support to create custom font textures from say freetype

 * Improve Sound/Music System
 Currently using SDL_mixer. It is adequate for now, but a much better alternative would be to use openAL, www.openal.org

 * Include sound/music media in media pack

 * Add weather effects
  - Query weather entity

 * Create a texture handling class.
  - Loads and unloads textures as required
  - Can perform transformations on textures

 * Create a file handling class
  - Allows memory mapping if appropriate
  - Allow file access from archives
  - transparent access bewtween file system and archives

  - Store type/position/emissive info about each light source
  - Determines light priority order (render N most appropriate light sources)
 
 * Create a particle engine for special effects
  - Smoke
  - Flames
  - Fog

 * Improve scripting engine
  - Character manipulation
  - Animation control
  - Init special effects

 * Allow character portraits

 * Cally improvements
  - Make model heads turn to face the way the camera is looking
  - Allow skinning
  - Improve animation/mesh changing 

