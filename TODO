 * Setup system to update values as varconf values update
  - Every object that uses a varconf object could connect a callback to the object.
  - Existing system works ok, but not great as it must be manually run after new values have been read in.

 * Allow general varconf object to parse command line.

 * Add support for OpenGL extensions. This is to provide higher quality effects.
 
 * Add ability to tokenise on quotes, not just spaces. This is a must. can only have one arg with spaces at the mo.

 * Allow line editing in console.

 * In game menu for configuration -> work on GLGooey interface

 * Improve memory usage
   - Unload unused textures and other such data during runtime.
   - SDL_mixer (or maybe SDL sound subsystem) doesn't clean up properly
   - Eris doesn't clean up properly

 * Add a BSP tree or other space partitioning system. This is to a) reduce number of objects rendered and b) provide distance information for choosing an appropriate quality of model to render

 * Move OpenGL code into one object. Aim is to allow the "drop in" of other Render objects using another system such as DX

 * Add a better GUI
   - First step is to add a gui_queue for rendering. This starts with the splash screen, then with anything else such as entity text
   - Finally render console.

 * Add collision detection
   - This can be as an addition to the BSP tree or equivalent code

 * Improve terrain engine
   - Include demetar?
   - Look in gamedev/flipcode for the possible additions to current terrain engine

 * Add support to create custom font textures from say freetype

 * Add a sky dome
   - See flipcode skydome tutorial

 * Colour cursors
   Cursors are currently implemented using the SDL cursor methods. These are only in black and white, and the cursors are hard coded in cursors.h. Colour cursors can be easily implemented by rendering the cursor as a texture and hiding the real one. The trick is to get mouse position.
  SDL offers two ways. one is to use SDL_GetMouseState and the second is to store the position on every MOUSEMOTION event. However both of these methods do not offer sufficient update intervals to be of real use. We require either another way or need to increase the rate of updates.

 * Improve Sound/Music System
 Currently using SDL_mixer. It is adequate for now, but a much better alternative would be to use openAL, www.openal.org
